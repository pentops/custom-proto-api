// Code generated by protoc-gen-go-sugar. DO NOT EDIT.

package schema_j5pb

import (
	driver "database/sql/driver"
	fmt "fmt"
)

// HTTPMethod
const (
	HTTPMethod_UNSPECIFIED HTTPMethod = 0
	HTTPMethod_GET         HTTPMethod = 1
	HTTPMethod_POST        HTTPMethod = 2
	HTTPMethod_PUT         HTTPMethod = 3
	HTTPMethod_DELETE      HTTPMethod = 4
	HTTPMethod_PATCH       HTTPMethod = 5
)

var (
	HTTPMethod_name_short = map[int32]string{
		0: "UNSPECIFIED",
		1: "GET",
		2: "POST",
		3: "PUT",
		4: "DELETE",
		5: "PATCH",
	}
	HTTPMethod_value_short = map[string]int32{
		"UNSPECIFIED": 0,
		"GET":         1,
		"POST":        2,
		"PUT":         3,
		"DELETE":      4,
		"PATCH":       5,
	}
	HTTPMethod_value_either = map[string]int32{
		"UNSPECIFIED":             0,
		"HTTP_METHOD_UNSPECIFIED": 0,
		"GET":                     1,
		"HTTP_METHOD_GET":         1,
		"POST":                    2,
		"HTTP_METHOD_POST":        2,
		"PUT":                     3,
		"HTTP_METHOD_PUT":         3,
		"DELETE":                  4,
		"HTTP_METHOD_DELETE":      4,
		"PATCH":                   5,
		"HTTP_METHOD_PATCH":       5,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x HTTPMethod) ShortString() string {
	return HTTPMethod_name_short[int32(x)]
}
func (x HTTPMethod) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *HTTPMethod) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := HTTPMethod_value_either[strVal]
	*x = HTTPMethod(val)
	return nil
}
