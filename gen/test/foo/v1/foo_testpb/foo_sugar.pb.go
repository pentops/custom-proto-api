// Code generated by protoc-gen-go-sugar. DO NOT EDIT.

package foo_testpb

// FooEventType is a oneof wrapper
type FooEventTypeKey string

const (
	FooEvent_Created FooEventTypeKey = "created"
	FooEvent_Updated FooEventTypeKey = "updated"
)

func (x *FooEventType) TypeKey() (FooEventTypeKey, bool) {
	switch x.Type.(type) {
	case *FooEventType_Created_:
		return FooEvent_Created, true
	case *FooEventType_Updated_:
		return FooEvent_Updated, true
	default:
		return "", false
	}
}

type IsFooEventTypeWrappedType interface {
	TypeKey() FooEventTypeKey
}

func (x *FooEventType) Set(val IsFooEventTypeWrappedType) {
	switch v := val.(type) {
	case *FooEventType_Created:
		x.Type = &FooEventType_Created_{Created: v}
	case *FooEventType_Updated:
		x.Type = &FooEventType_Updated_{Updated: v}
	}
}
func (x *FooEventType) Get() IsFooEventTypeWrappedType {
	switch v := x.Type.(type) {
	case *FooEventType_Created_:
		return v.Created
	case *FooEventType_Updated_:
		return v.Updated
	default:
		return nil
	}
}
func (x *FooEventType_Created) TypeKey() FooEventTypeKey {
	return FooEvent_Created
}
func (x *FooEventType_Updated) TypeKey() FooEventTypeKey {
	return FooEvent_Updated
}

type IsFooEventType_Type = isFooEventType_Type
