syntax = "proto3";

package j5.config.v1;

option go_package = "github.com/pentops/j5/gen/j5/config/v1/config_j5pb";

// Config represents the config file (j5.yaml) for a repo.
message RepoConfigFile {
  repeated BuildPlugin plugins = 3;
  repeated GenerateConfig generate = 4;
  repeated BundleReference bundles = 6;

  GitConfig git = 7;

  // Inline Bundle
  RegistryConfig registry = 8;
  repeated PackageConfig packages = 9;
  repeated PublishConfig publish = 10;
  CodecOptions options = 11;
}

message BundleConfigFile {
  RegistryConfig registry = 1;
  repeated PackageConfig packages = 2;
  repeated PublishConfig publish = 3;
  CodecOptions options = 4;
}

message BundleReference {
  string name = 1;
  string dir = 2;
  repeated string deps = 3;
}

message PackageConfig {
  string label = 1;
  string name = 2;
  string prose = 3;
}

message CodecOptions {
  repeated string trim_sub_packages = 1;
}

// When code is managed through git, configures mapping between git branches,
// tags and commits to output version tags.
message GitConfig {
  // used to determine if a commit is the 'latest' or 'main' or 'stable' branch.
  // defaults to /refs/heads/main
  // accepts wildcard *
  // e.g. /refs/heads/main or /refs/tags/v*
  // Will become 'latest' in go mod packages
  string main = 1;
}

message Input {
  oneof type {
    string local = 1; // name of a local bundle
    Repo repo = 2;
    Registry registry = 3;
  }

  message Repo {
    string root = 1; // file:// or git://
    string dir = 2;
    string bundle = 3;
  }

  message Registry {
    string organization = 1;
    string name = 2;
    string version = 3;
  }
}

message PublishConfig {
  string name = 1;
  OutputType output_format = 2;
  map<string, string> opts = 3;
  repeated BuildPlugin plugins = 4;
}

message RegistryConfig {
  string organization = 1;
  string name = 2;
}

message GenerateConfig {
  string name = 1;
  repeated Input inputs = 2;

  // Sets an option variable for all plugins in the build.
  map<string, string> opts = 4;
  repeated BuildPlugin plugins = 5;

  string output = 3;
}

message OutputType {
  oneof type {
    GoProxy go_proxy = 10;
  }

  // GoProxy serves a go module using the go module proxy protocol
  // https://golang.org/cmd/go/#hdr-Module_proxy_protocol
  // The 'canonical' URL of the module should be a HTTP page which redirects
  // to the registry server, e.g.:
  // <meta name="go-import" content="example.org mod https://code.org/moduleproxy">
  // This allows the commit info from the source to map directly to the built
  // package, where using VCS requires a new commit for the build.
  message GoProxy {
    string path = 1; // e.g. github.com/pentops/o5-go
    string go_version = 2;
    repeated Dep deps = 3;

    message Dep {
      string path = 1; // e.g. github.com/pentops/o5-go
      string version = 2; // e.g. v0.1.0
    }
  }
}

message BuildPlugin {
  // extend the base plugin.
  optional string base = 1;

  // the name of this plugin
  string name = 2;

  // Specifes the input and output format
  Plugin type = 3;

  // Options for the given input type, e.g. protc-gen options.
  // On conflicts, the last option wins in the order:
  // 1. base opts (including the resolved opts of the base's base if applicable)
  // 2. publish or generate opts (i.e. the parent of the plugin)
  // 3. plugin opts here
  map<string, string> opts = 4;

  // For non-docker, an executable in $PATH, also serves as the 'name' of the
  // command for logging. Not passed in when using docker comtainers.
  string cmd = 5;

  repeated string args = 6; // CLI Arguments, passed as specified

  // Environment Variables for the command or
  // container, Expansion of runtime variables is performed, the available
  // variables are set by the context calling the build,
  repeated string env = 7;

  // a docker container to replace the local $PATH executable.
  DockerSpec docker = 8;

  message DockerSpec {
    string image = 1;

    // passed as-is to the docker API, does not default to or reference Command.cmd
    repeated string entrypoint = 2;

    // passed as-is to the docker API, does not default to or reference Command.cmd
    repeated string cmd = 3;
  }
}

// TODO: This currently floats without a config, we need to decide if it belongs
// in the repo config or builder shared config. The complication is that the
// builder has access to all pulled images on the host, so linking this to the
// repo is a bit misleading.
message DockerRegistryAuth {
  // Matches which images this auth applies to
  // e.g. ghrc.io/* or *.dkr.ecr.*.amazonaws.com/*
  string registry = 1;

  // Supplies the method for auth.
  // Not retuired if the registry matches a known pattern.
  oneof auth {
    Basic basic = 10;
    AWSECS aws_ecs = 11; // default if *.dkr.ecr.*.amazonaws.com/*
    Github github = 12; // default if ghrc.io/*
  }

  message Basic {
    string username = 1;
    string password_env_var = 2;
  }

  message AWSECS {
    // TODO: Options for aws auth. Current implementations assume ec2 metadata.
  }

  message Github {
    string token_env_var = 1; // defaults to GITHUB_TOKEN
  }
}

enum Plugin {
  PLUGIN_UNSPECIFIED = 0;
  PLUGIN_PROTO = 1;
  PLUGIN_J5_CLIENT = 2;
}
