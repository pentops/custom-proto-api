syntax = "proto3";

package j5.config.v1;

option go_package = "github.com/pentops/jsonapi/gen/j5/config/v1/config_j5pb";

// Config represents the config file (j5.yaml) for a repo.
message Config {
  repeated PackageConfig packages = 1;

  CodecOptions options = 2;
  RegistryConfig registry = 3;

  repeated ProtoBuildConfig proto_builds = 4;

  repeated BuildPlugin plugins = 5;

  repeated GenerateConfig generate = 6;

  GitConfig git = 7;
}

message PackageConfig {
  string label = 1;
  string name = 2;
  string prose = 3;
}

message RegistryConfig {
  string organization = 1;
  string name = 2;
}

message CodecOptions {
  repeated string trim_sub_packages = 1;
  bool wrap_oneof = 2;
  ShortEnumOptions short_enums = 3;
}

message ShortEnumOptions {
  string unspecified_suffix = 1;
  bool strict_unmarshal = 2;
}

// When code is managed through git, configures mapping between git branches,
// tags and commits to output version tags.
message GitConfig {
  // used to determine if a commit is the 'latest' or 'main' or 'stable' branch.
  // defaults to /refs/heads/main
  // accepts wildcard *
  // e.g. /refs/heads/main or /refs/tags/v*
  // Will become 'latest' in go mod packages
  string main = 1;
}

message GenerateConfig {
  string name = 1;
  repeated string src = 2;
  string out = 3;
  map<string, string> opts = 4;

  repeated BuildPlugin plugins = 5;
}

message ProtoBuildConfig {
  string name = 1;
  repeated BuildPlugin plugins = 2;

  oneof package_type {
    GoProxy go_proxy = 10;
  }

  // GoProxy serves a go module using the go module proxy protocol
  // https://golang.org/cmd/go/#hdr-Module_proxy_protocol
  // The 'canonical' URL of the module should be a HTTP page which redirects
  // to the registry server, e.g.:
  // <meta name="go-import" content="example.org mod https://code.org/moduleproxy">
  // This allows the commit info from the source to map directly to the built
  // package, where using VCS requires a new commit for the build.
  message GoProxy {
    string path = 1; // e.g. github.com/pentops/o5-go
    string go_mod_file = 2; // e.g. ./ext/builder/go.mod
  }
}

message BuildPlugin {
  // extend the base plugin.
  optional string base = 1;

  // the name of this plugin
  string name = 2;

  Plugin type = 3;

  // a docker container which will receive stdin and pipe stdout
  // input is google.protobuf.compiler.CodeGeneratorRequest
  // output is google.protobuf.compiler.CodeGeneratorResponse
  DockerSpec docker = 4;

  CommandSpec command = 5;

  map<string, string> opts = 7;
}

message DockerSpec {
  string image = 2;
  repeated string env = 3;
  repeated string entrypoint = 4;
  repeated string command = 5;
  bool pull = 6;
}

message CommandSpec {
  string command = 1;
  repeated string args = 2;
  repeated string env = 3;
}

// TODO: This currently floats without a config, we need to decide if it belongs
// in the repo config or builder shared config. The complication is that the
// builder has access to all pulled images on the host, so linking this to the
// repo is a bit misleading.
message DockerRegistryAuth {
  // Matches which images this auth applies to
  // e.g. ghrc.io/* or *.dkr.ecr.*.amazonaws.com/*
  string registry = 1;

  // Supplies the method for auth.
  // Not retuired if the registry matches a known pattern.
  oneof auth {
    Basic basic = 10;
    AWSECS aws_ecs = 11; // default if *.dkr.ecr.*.amazonaws.com/*
    Github github = 12; // default if ghrc.io/*
  }

  message Basic {
    string username = 1;
    string password_env_var = 2;
  }

  message AWSECS {
    // TODO: Options for aws auth. Current implementations assume ec2 metadata.
  }

  message Github {
    string token_env_var = 1; // defaults to GITHUB_TOKEN
  }
}

enum Plugin {
  PLUGIN_UNSPECIFIED = 0;
  PLUGIN_PROTO = 1;
  PLUGIN_J5_CLIENT = 2;
}
